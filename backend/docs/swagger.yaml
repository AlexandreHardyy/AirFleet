basePath: /api
definitions:
  handlers.Response:
    properties:
      message:
        type: string
    type: object
  inputs.CreatePilot:
    type: object
  inputs.CreateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  inputs.CreateVehicle:
    properties:
      matriculation:
        type: string
      model_name:
        type: string
      seat:
        type: integer
      type:
        type: string
      user_id:
        type: integer
    required:
    - matriculation
    - model_name
    - seat
    - type
    - user_id
    type: object
  inputs.LoginUser:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  inputs.UpdateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      is_pilot_verified:
        type: boolean
      is_verified:
        type: boolean
      last_name:
        type: string
      role:
        type: string
      token_verify:
        type: string
    type: object
  inputs.UpdateVehicle:
    properties:
      matriculation:
        type: string
      model_name:
        type: string
      seat:
        type: integer
      type:
        type: string
      user_id:
        type: integer
    type: object
  responses.ListUser:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_verified:
        type: boolean
      last_name:
        type: string
      updated_at:
        type: string
    type: object
  responses.Login:
    properties:
      token:
        type: string
    type: object
  responses.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      role:
        type: string
      updated_at:
        type: string
      vehicles:
        items:
          $ref: '#/definitions/responses.Vehicle'
        type: array
    type: object
  responses.Vehicle:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_verified:
        type: boolean
      matriculation:
        type: string
      model_name:
        type: string
      seat:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: this is the go project.
  title: Backend AirFleet
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: get all user for admins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ListUser'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: register for a normal client
      parameters:
      - description: Message body
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Register user
      tags:
      - user
  /users/{id}:
    patch:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Body...
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: User User
      tags:
      - user
  /users/login:
    post:
      consumes:
      - application/json
      description: login a client
      parameters:
      - description: Message body
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Login'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Login
      tags:
      - user
  /users/me:
    get:
      consumes:
      - application/json
      description: get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Current user
      tags:
      - user
  /users/pilot:
    post:
      consumes:
      - multipart/form-data
      description: register for a pilot
      parameters:
      - description: Message body
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.CreatePilot'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Register pilot
      tags:
      - user
  /users/pilot-validate/{id}:
    patch:
      description: Update user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Validate Pilot Account
      tags:
      - user
  /users/validate/{token}:
    get:
      description: validate account with token
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Validate Account
      tags:
      - user
  /vehicles:
    get:
      consumes:
      - application/json
      description: get all vehicles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.Vehicle'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all vehicles
      tags:
      - vehicle
    post:
      consumes:
      - application/json
      description: create a new vehicle for a pilot
      parameters:
      - description: Message body
        in: body
        name: vehicleInput
        required: true
        schema:
          $ref: '#/definitions/inputs.CreateVehicle'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.Vehicle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Create vehicle
      tags:
      - vehicle
  /vehicles/{id}:
    delete:
      consumes:
      - application/json
      description: delete vehicle by id
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: delete vehicle by id
      tags:
      - vehicle
    get:
      consumes:
      - application/json
      description: get vehicle by id
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Vehicle'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: get vehicle by id
      tags:
      - vehicle
    patch:
      consumes:
      - application/json
      description: update vehicle by id
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      - description: Message body
        in: body
        name: vehicleInput
        required: true
        schema:
          $ref: '#/definitions/inputs.UpdateVehicle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Vehicle'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: update vehicle by id
      tags:
      - vehicle
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
