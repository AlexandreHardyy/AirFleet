basePath: /api
definitions:
  handlers.Response:
    properties:
      message:
        type: string
    type: object
  inputs.Airport:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  inputs.CreateFlight:
    properties:
      arrival:
        $ref: '#/definitions/inputs.Airport'
      departure:
        $ref: '#/definitions/inputs.Airport'
    required:
    - arrival
    - departure
    type: object
  inputs.CreatePilot:
    type: object
  inputs.CreateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  inputs.CreateVehicle:
    properties:
      cruise_altitude:
        type: number
      cruise_speed:
        type: number
      is_verified:
        type: boolean
      matriculation:
        type: string
      model_name:
        type: string
      seat:
        type: integer
      type:
        type: string
    required:
    - cruise_altitude
    - cruise_speed
    - matriculation
    - model_name
    - seat
    - type
    type: object
  inputs.InputCreateProposal:
    properties:
      availableSeats:
        type: integer
      createFlight:
        $ref: '#/definitions/inputs.CreateFlight'
      departureTime:
        type: string
      description:
        type: string
      price:
        type: number
      vehicleId:
        type: integer
    required:
    - availableSeats
    - createFlight
    - departureTime
    - description
    - price
    - vehicleId
    type: object
  inputs.InputUpdateProposal:
    properties:
      availableSeats:
        type: integer
      departureTime:
        type: string
      description:
        type: string
      price:
        type: number
      vehicleId:
        type: integer
    type: object
  inputs.LoginUser:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  inputs.UpdateUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      is_pilot_verified:
        type: boolean
      is_verified:
        type: boolean
      last_name:
        type: string
      role:
        type: string
      token_verify:
        type: string
    type: object
  inputs.UpdateVehicle:
    properties:
      cruise_altitude:
        type: number
      cruise_speed:
        type: number
      is_selected:
        type: boolean
      is_verified:
        type: boolean
      matriculation:
        type: string
      model_name:
        type: string
      seat:
        type: integer
      type:
        type: string
      user_id:
        type: integer
    type: object
  models.File:
    properties:
      created_at:
        type: string
      id:
        type: integer
      path:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  responses.ListUser:
    properties:
      created_at:
        type: string
      email:
        type: string
      files:
        items:
          $ref: '#/definitions/models.File'
        type: array
      first_name:
        type: string
      id:
        type: integer
      is_pilot_verified:
        type: boolean
      is_verified:
        type: boolean
      last_name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  responses.Login:
    properties:
      token:
        type: string
    type: object
  responses.ResponseAirport:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  responses.ResponseFlight:
    properties:
      arrival:
        $ref: '#/definitions/responses.ResponseAirport'
      created_at:
        type: string
      departure:
        $ref: '#/definitions/responses.ResponseAirport'
      id:
        type: integer
      pilot:
        $ref: '#/definitions/responses.ListUser'
      pilot_id:
        type: integer
      price:
        type: number
      status:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/responses.ListUser'
        type: array
      vehicle:
        $ref: '#/definitions/responses.ResponseVehicle'
      vehicle_id:
        type: integer
    required:
    - arrival
    - departure
    - id
    - status
    type: object
  responses.ResponseMessage:
    properties:
      content:
        type: string
      created_at:
        type: string
      flight_id:
        type: integer
      id:
        type: integer
      user:
        $ref: '#/definitions/responses.ListUser'
      user_id:
        type: integer
    required:
    - content
    - id
    type: object
  responses.ResponseModule:
    properties:
      id:
        type: integer
      is_enabled:
        type: boolean
      name:
        type: string
    type: object
  responses.ResponseProposal:
    properties:
      available_seats:
        type: integer
      departure_time:
        type: string
      description:
        type: string
      flight:
        $ref: '#/definitions/responses.ResponseFlight'
      id:
        type: integer
    type: object
  responses.ResponseRating:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      pilot:
        $ref: '#/definitions/responses.ListUser'
      pilot_id:
        type: integer
      rating:
        type: number
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/responses.ListUser'
      user_id:
        type: integer
    type: object
  responses.ResponseVehicle:
    properties:
      created_at:
        type: string
      cruise_altitude:
        type: number
      cruise_speed:
        type: number
      id:
        type: integer
      is_selected:
        type: boolean
      is_verified:
        type: boolean
      matriculation:
        type: string
      model_name:
        type: string
      seat:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  responses.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      role:
        type: string
      updated_at:
        type: string
      vehicles:
        items:
          $ref: '#/definitions/responses.ResponseVehicle'
        type: array
    type: object
info:
  contact: {}
  description: this is the go project.
  title: Backend AirFleet
  version: "1.0"
paths:
  /flights:
    get:
      consumes:
      - application/json
      description: get all flights
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseFlight'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all flights
      tags:
      - flight
    post:
      consumes:
      - application/json
      description: create a new flight
      parameters:
      - description: Message body
        in: body
        name: flightInput
        required: true
        schema:
          $ref: '#/definitions/inputs.CreateFlight'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.ResponseFlight'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Create flight
      tags:
      - flight
  /flights/{id}:
    get:
      consumes:
      - application/json
      description: get flight
      parameters:
      - description: Flight ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseFlight'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get flight
      tags:
      - flight
  /flights/current:
    get:
      consumes:
      - application/json
      description: get current flight
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseFlight'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get current flight
      tags:
      - flight
  /flights/history:
    get:
      consumes:
      - application/json
      description: get flight history
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseFlight'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get flight history
      tags:
      - flight
  /flights/nearby:
    get:
      consumes:
      - application/json
      description: get flight requests near by
      parameters:
      - description: Latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: Longitude
        in: query
        name: longitude
        required: true
        type: number
      - description: Range
        in: query
        name: range
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseFlight'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get flight requests near by
      tags:
      - flight
  /messages/flight/{flightId}:
    get:
      consumes:
      - application/json
      description: Get all messages by flight ID
      parameters:
      - description: Flight ID
        in: path
        name: flightId
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseMessage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all messages by flight ID
      tags:
      - messages
  /modules:
    get:
      consumes:
      - application/json
      description: Get all modules
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseModule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all modules
      tags:
      - modules
  /modules/{id}:
    put:
      consumes:
      - application/json
      description: Update module
      parameters:
      - description: Module ID
        in: path
        name: id
        required: true
        type: integer
      - description: Is Enabled
        in: body
        name: is_enabled
        required: true
        schema:
          type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Update module
      tags:
      - modules
  /modules/{name}:
    get:
      consumes:
      - application/json
      description: Get module by name
      parameters:
      - description: Module Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseModule'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get module by name
      tags:
      - modules
  /proposals:
    get:
      consumes:
      - application/json
      description: Get all proposals
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Maximum price
        in: query
        name: max_price
        type: string
      - description: Left available seats
        in: query
        name: left_available_seats
        type: string
      - description: Departure position latitude
        in: query
        name: departure_position_lat
        type: string
      - description: Departure position longitude
        in: query
        name: departure_position_long
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseProposal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all proposals
      tags:
      - proposals
    post:
      consumes:
      - application/json
      description: Create a proposal
      parameters:
      - description: Proposal
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/inputs.InputCreateProposal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseProposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Create a proposal
      tags:
      - proposals
  /proposals/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a proposal
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Delete a proposal
      tags:
      - proposals
    get:
      consumes:
      - application/json
      description: Get a proposal
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseProposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get a proposal
      tags:
      - proposals
    patch:
      consumes:
      - application/json
      description: Update a proposal
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Proposal
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/inputs.InputUpdateProposal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseProposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Update a proposal
      tags:
      - proposals
  /proposals/{id}/join:
    patch:
      consumes:
      - application/json
      description: Join a proposal
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Join a proposal
      tags:
      - proposals
  /proposals/{id}/leave:
    patch:
      consumes:
      - application/json
      description: Leave a proposal
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Leave a proposal
      tags:
      - proposals
  /proposals/{id}/start:
    patch:
      consumes:
      - application/json
      description: Start a proposal
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Start a proposal
      tags:
      - proposals
  /proposals/me:
    get:
      consumes:
      - application/json
      description: Get my proposals
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseProposal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get my proposals
      tags:
      - proposals
  /ratings:
    get:
      consumes:
      - application/json
      description: Get all ratings
      parameters:
      - description: Status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseRating'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all ratings
      tags:
      - ratings
  /ratings/{id}:
    put:
      consumes:
      - application/json
      description: Update rating
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: integer
      - description: Rating
        in: body
        name: rating
        schema:
          type: object
      - description: Comment
        in: body
        name: comment
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Update rating
      tags:
      - ratings
  /ratings/pilot/{id}:
    get:
      consumes:
      - application/json
      description: Get rating by pilot ID
      parameters:
      - description: Pilot ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseRating'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get rating by pilot ID
      tags:
      - ratings
  /ratings/status/{status}:
    get:
      consumes:
      - application/json
      description: Get rating by user ID and status
      parameters:
      - description: Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseRating'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get rating by user ID and status
      tags:
      - ratings
  /users:
    get:
      consumes:
      - application/json
      description: get all user for admins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ListUser'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: register for a normal client
      parameters:
      - description: Message body
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Register user
      tags:
      - user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Delete user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Body...
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: User
      tags:
      - user
  /users/login:
    post:
      consumes:
      - application/json
      description: login a client
      parameters:
      - description: Message body
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Login'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Login
      tags:
      - user
  /users/me:
    get:
      consumes:
      - application/json
      description: get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Current user
      tags:
      - user
  /users/pilot:
    post:
      consumes:
      - multipart/form-data
      description: register for a pilot
      parameters:
      - description: Message body
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/inputs.CreatePilot'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Register pilot
      tags:
      - user
  /users/pilot-validate/{id}:
    patch:
      description: Update user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Validate Pilot Account
      tags:
      - user
  /users/validate/{token}:
    get:
      description: validate account with token
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Validate Account
      tags:
      - user
  /vehicles:
    get:
      consumes:
      - application/json
      description: get all vehicles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseVehicle'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all vehicles
      tags:
      - vehicle
    post:
      consumes:
      - application/json
      description: Create vehicle
      parameters:
      - description: Message body
        in: body
        name: vehicleInput
        required: true
        schema:
          $ref: '#/definitions/inputs.CreateVehicle'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.ResponseVehicle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Create vehicle
      tags:
      - vehicle
  /vehicles/{id}:
    delete:
      consumes:
      - application/json
      description: delete vehicle by id
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: delete vehicle by id
      tags:
      - vehicle
    get:
      consumes:
      - application/json
      description: get vehicle by id
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseVehicle'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: get vehicle by id
      tags:
      - vehicle
    patch:
      consumes:
      - application/json
      description: update vehicle by id
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      - description: Message body
        in: body
        name: vehicleInput
        required: true
        schema:
          $ref: '#/definitions/inputs.UpdateVehicle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResponseVehicle'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: update vehicle by id
      tags:
      - vehicle
  /vehicles/me:
    get:
      consumes:
      - application/json
      description: get all vehicles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ResponseVehicle'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Response'
      security:
      - BearerAuth: []
      summary: Get all vehicles
      tags:
      - vehicle
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
